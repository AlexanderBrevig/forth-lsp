/Store
!
( x a-addr -- )
Store x at a-addr. 

/num
#
( ud1 -- ud2 )
Divide ud1 by the number in BASE giving the quotient ud2 and the remainder n. (n is the least significant digit of ud1.) Convert n to external form and add the resulting character to the beginning of the pictured numeric output string. An ambiguous condition exists if # executes outside of a <# #> delimited number conversion. 

/num-end
#>
( xd -- c-addr u )
Drop xd. Make the pictured numeric output string available as a character string. c-addr and u specify the resulting character string. A program may replace characters within the string. 

/numS
#S
( ud1 -- ud2 )
Convert one digit of ud1 according to the rule for #. Continue conversion until the quotient is zero. ud2 is zero. An ambiguous condition exists if #S executes outside of a <# #> delimited number conversion. 

/Tick
'
( "<spaces>name" -- xt )
Skip leading space delimiters. Parse name delimited by a space. Find name and return xt, the execution token for name. An ambiguous condition exists if name is not found. When interpreting, ' xyz EXECUTE is equivalent to xyz. Many Forth systems use a state-smart tick. Many do not. Forth-2012 follows the usage of Forth 94. 

/p
(
     ( "ccc<paren>" -- )
Parse ccc delimited by ) (right parenthesis). ( is an immediate word. 

/Times
*
( n1 | u1 n2 | u2 -- n3 | u3 )
Multiply n1 | u1 by n2 | u2 giving the product n3 | u3. T{ MID-UINT+1 1 RSHIFT 2 *               -> MID-UINT+1 }T T{ MID-UINT+1 2 RSHIFT 4 *               -> MID-UINT+1 }T T{ MID-UINT+1 1 RSHIFT MID-UINT+1 OR 2 * -> MID-UINT+1 }T 

/TimesDiv
*/
( n1 n2 n3 -- n4 )
Multiply n1 by n2 producing the intermediate double-cell result d. Divide d by n3 giving the single-cell quotient n4. An ambiguous condition exists if n3 is zero or if the quotient n4 lies outside the range of a signed number. If d and n3 differ in sign, the implementation-defined result returned will be the same as that returned by either the phrase >R M* R> FM/MOD SWAP DROP or the phrase >R M* R> SM/REM SWAP DROP. 

/TimesDivMOD
*/MOD
( n1 n2 n3 -- n4 n5 )
Multiply n1 by n2 producing the intermediate double-cell result d. Divide d by n3 producing the single-cell remainder n4 and the single-cell quotient n5. An ambiguous condition exists if n3 is zero, or if the quotient n5 lies outside the range of a single-cell signed integer. If d and n3 differ in sign, the implementation-defined result returned will be the same as that returned by either the phrase >R M* R> FM/MOD or the phrase >R M* R> SM/REM. 

/Plus
+
( n1 | u1 n2 | u2 -- n3 | u3 )
Add n2 | u2 to n1 | u1, giving the sum n3 | u3. 

/PlusStore
+!
( n | u a-addr -- )
Add n | u to the single-cell number at a-addr. 

/PlusLOOP
+LOOP
     ( C: do-sys -- )
Append the run-time semantics given below to the current definition. Resolve the destination of all unresolved occurrences of LEAVE between the location given by do-sys and the next location for a transfer of control, to execute the words following +LOOP. An ambiguous condition exists if the loop control parameters are unavailable. Add n to the loop index. If the loop index did not cross the boundary between the loop limit minus one and the loop limit, continue execution at the beginning of the loop. Otherwise, discard the current loop control parameters and continue execution immediately following the loop. 

/Comma
,
( x -- )
Reserve one cell of data space and store x in the cell. If the data-space pointer is aligned when , begins execution, it will remain aligned when , finishes execution. An ambiguous condition exists if the data-space pointer is not aligned prior to execution of ,. See: 6.2.0945 COMPILE,. 

/Minus
-
( n1 | u1 n2 | u2 -- n3 | u3 )
Subtract n2 | u2 from n1 | u1, giving the difference n3 | u3. 

/d
.
( n -- )
Display n in free field format. 

/Dotq
."
     ( "ccc<quote>" -- )
Parse ccc delimited by " (double-quote). Append the run-time semantics given below to the current definition. Display ccc. An implementation may define interpretation semantics for ." if desired. In one plausible implementation, interpreting ." would display the delimited message. In another plausible implementation, interpreting ." would compile code to display the message later. In still another plausible implementation, interpreting ." would be treated as an exception. Given this variation a Standard Program may not use ." while interpreting. Similarly, a Standard Program may not compile POSTPONE ." inside a new word, and then use that word while interpreting. See F.6.1.1320 EMIT. 

/Div
/
( n1 n2 -- n3 )
Divide n1 by n2, giving the single-cell quotient n3. An ambiguous condition exists if n2 is zero. If n1 and n2 differ in sign, the implementation-defined result returned will be the same as that returned by either the phrase >R S>D R> FM/MOD SWAP DROP or the phrase >R S>D R> SM/REM SWAP DROP. 

/DivMOD
/MOD
( n1 n2 -- n3 n4 )
Divide n1 by n2, giving the single-cell remainder n3 and the single-cell quotient n4. An ambiguous condition exists if n2 is zero. If n1 and n2 differ in sign, the implementation-defined result returned will be the same as that returned by either the phrase >R S>D R> FM/MOD or the phrase >R S>D R> SM/REM. 

/Zeroless
0<
( n -- flag )
flag is true if and only if n is less than zero. 

/ZeroEqual
0=
( x -- flag )
flag is true if and only if x is equal to zero. 

/OnePlus
1+
( n1 | u1 -- n2 | u2 )
Add one (1) to n1 | u1 giving the sum n2 | u2. 

/OneMinus
1-
( n1 | u1 -- n2 | u2 )
Subtract one (1) from n1 | u1 giving the difference n2 | u2. 

/TwoStore
2!
( x1 x2 a-addr -- )
Store the cell pair x1 x2 at a-addr, with x2 at a-addr and x1 at the next consecutive cell. It is equivalent to the sequence SWAP OVER ! CELL+ !. 

/TwoTimes
2*
( x1 -- x2 )
x2 is the result of shifting x1 one bit toward the most-significant bit, filling the vacated least-significant bit with zero. 

/TwoDiv
2/
( x1 -- x2 )
x2 is the result of shifting x1 one bit toward the least-significant bit, leaving the most-significant bit unchanged. 

/TwoFetch
2@
( a-addr -- x1 x2 )
Fetch the cell pair x1 x2 stored at a-addr. x2 is stored at a-addr and x1 at the next consecutive cell. It is equivalent to the sequence DUP CELL+ @ SWAP @. 

/TwoDROP
2DROP
( x1 x2 -- )
Drop cell pair x1 x2 from the stack. 

/TwoDUP
2DUP
( x1 x2 -- x1 x2 x1 x2 )
Duplicate cell pair x1 x2. 

/TwoOVER
2OVER
( x1 x2 x3 x4 -- x1 x2 x3 x4 x1 x2 )
Copy cell pair x1 x2 to the top of the stack. 

/TwoSWAP
2SWAP
( x1 x2 x3 x4 -- x3 x4 x1 x2 )
Exchange the top two cell pairs. 

/Colon
:
( C: "<spaces>name" -- colon-sys )
Skip leading space delimiters. Parse name delimited by a space. Create a definition for name, called a "colon definition". Enter compilation state and start the current definition, producing colon-sys. Append the initiation semantics given below to the current definition. Save implementation-dependent information nest-sys about the calling definition. The stack effects i * x represent arguments to name. Execute the definition name. The stack effects i * x and j * x represent arguments to and results from name, respectively. In Forth 83, this word was specified to alter the search order. This specification is explicitly removed in this standard. We believe that in most cases this has no effect; however, systems that allow many search orders found the Forth-83 behavior of colon very undesirable. The following tests the dictionary search order: 

/Semi
;
     ( C: colon-sys -- )
Append the run-time semantics below to the current definition. End the current definition, allow it to be found in the dictionary and enter interpretation state, consuming colon-sys. If the data-space pointer is not aligned, reserve enough data space to align it. Return to the calling definition specified by nest-sys. One function performed by both ; and ;CODE is to allow the current definition to be found in the dictionary. If the current definition was created by :NONAME the current definition has no definition name and thus cannot be found in the dictionary. If :NONAME is implemented the Forth compiler must maintain enough information about the current definition to allow ; and ;CODE to determine whether or not any action must be taken to allow it to be found. 

/less
<
( n1 n2 -- flag )
flag is true if and only if n1 is less than n2. 

/num-start
<#
( -- )
Initialize the pictured numeric output conversion process. 

/Equal
=
( x1 x2 -- flag )
flag is true if and only if x1 is bit-for-bit the same as x2. 

/more
>
( n1 n2 -- flag )
flag is true if and only if n1 is greater than n2. 

/toBODY
>BODY
( xt -- a-addr )
a-addr is the data-field address corresponding to xt. An ambiguous condition exists if xt is not for a word defined via CREATE. 

/toIN
>IN
( -- a-addr )
a-addr is the address of a cell containing the offset in characters from the start of the input buffer to the start of the parse area. 

/toNUMBER
>NUMBER
( ud1 c-addr1 u1 -- ud2 c-addr2 u2 )
ud2 is the unsigned result of converting the characters within the string specified by c-addr1 u1 into digits, using the number in BASE, and adding each into ud1 after multiplying ud1 by the number in BASE. Conversion continues left-to-right until a character that is not convertible, including any "+" or "-", is encountered or the string is entirely converted. c-addr2 is the location of the first unconverted character or the first character past the end of the string if the string was entirely converted. u2 is the number of unconverted characters in the string. An ambiguous condition exists if ud2 overflows during the conversion. 

/toR
>R
     ( x -- )
Move x to the return stack. 

/qDUP
?DUP
( x -- 0  |  x x )
Duplicate x if it is non-zero. 

/Fetch
@
( a-addr -- x )
x is the value stored at a-addr. 

/ABORT
ABORT
( i * x -- )
Empty the data stack and perform the function of QUIT, which includes emptying the return stack, without displaying a message. 

/ABORTq
ABORT"
     ( "ccc<quote>" -- )
Parse ccc delimited by a " (double-quote). Append the run-time semantics given below to the current definition. Remove x1 from the stack. If any bit of x1 is not zero, display ccc and perform an implementation-defined abort sequence that includes the function of ABORT. 

/ABS
ABS
( n -- u )
u is the absolute value of n. 

/ACCEPT
ACCEPT
( c-addr +n1 -- +n2 )
Receive a string of at most +n1 characters. An ambiguous condition exists if +n1 is zero or greater than 32,767. Display graphic characters as they are received. A program that depends on the presence or absence of non-graphic characters in the string has an environmental dependency. The editing functions, if any, that the system performs in order to construct the string are implementation-defined. It is recommended that all non-graphic characters be reserved for editing or control functions and not be stored in the input string. 

/ALIGN
ALIGN
( -- )
If the data-space pointer is not aligned, reserve enough space to align it. 

/ALIGNED
ALIGNED
( addr -- a-addr )
a-addr is the first aligned address greater than or equal to addr. 

/ALLOT
ALLOT
( n -- )
If n is greater than zero, reserve n address units of data space. If n is less than zero, release | n | address units of data space. If n is zero, leave the data-space pointer unchanged. 

/AND
AND
( x1 x2 -- x3 )
x3 is the bit-by-bit logical "and" of x1 with x2. T{ 0 INVERT 1 AND -> 1 }T T{ 1 INVERT 1 AND -> 0 }T 

/BASE
BASE
( -- a-addr )
a-addr is the address of a cell containing the current number-conversion radix {{2...36}}. 

/BEGIN
BEGIN
     ( C: -- dest )
Put the next location for a transfer of control, dest, onto the control flow stack. Append the run-time semantics given below to the current definition. Continue execution.    : X ... BEGIN ... test UNTIL ; 

/BL
BL
( -- char )
char is the character value for a space. 

/CStore
C!
( char c-addr -- )
Store char at c-addr. When character size is smaller than cell size, only the number of low-order bits corresponding to character size are transferred. 

/CComma
C,
( char -- )
Reserve space for one character in the data space and store char in the space. If the data-space pointer is character aligned when C, begins execution, it will remain character aligned when C, finishes execution. An ambiguous condition exists if the data-space pointer is not character-aligned prior to execution of C,. 

/CFetch
C@
( c-addr -- char )
Fetch the character stored at c-addr. When the cell size is greater than character size, the unused high-order bits are all zeroes. 

/CELLPlus
CELL+
( a-addr1 -- a-addr2 )
Add the size in address units of a cell to a-addr1, giving a-addr2. 

/CELLS
CELLS
( n1 -- n2 )
n2 is the size in address units of n1 cells. 

/CHAR
CHAR
( "<spaces>name" -- char )
Skip leading space delimiters. Parse name delimited by a space. Put the value of its first character onto the stack. 

/CHARPlus
CHAR+
( c-addr1 -- c-addr2 )
Add the size in address units of a character to c-addr1, giving c-addr2. 

/CHARS
CHARS
( n1 -- n2 )
n2 is the size in address units of n1 characters. 

/CONSTANT
CONSTANT
( x "<spaces>name" -- )
Skip leading space delimiters. Parse name delimited by a space. Create a definition for name with the execution semantics defined below. Place x on the stack. T{ : EQU CONSTANT ; -> }T T{ X123 EQU Y123 -> }T T{ Y123 -> 123 }T 

/COUNT
COUNT
( c-addr1 -- c-addr2 u )
Return the character string specification for the counted string stored at c-addr1. c-addr2 is the address of the first character after c-addr1. u is the contents of the character at c-addr1, which is the length in characters of the string at c-addr2. 

/CR
CR
( -- )
Cause subsequent output to appear at the beginning of the next line. 

/CREATE
CREATE
( "<spaces>name" -- )
Skip leading space delimiters. Parse name delimited by a space. Create a definition for name with the execution semantics defined below. If the data-space pointer is not aligned, reserve enough data space to align it. The new data-space pointer defines name's data field. CREATE does not allocate data space in name's data field. a-addr is the address of name's data field. The execution semantics of name may be extended by using DOES>. Reservation of data field space is typically done with ALLOT. 

/DECIMAL
DECIMAL
( -- )
Set the numeric conversion radix to ten (decimal). 

/DEPTH
DEPTH
( -- +n )
+n is the number of single-cell values contained in the data stack before +n was placed on the stack. 

/DO
DO
     ( C: -- do-sys )
Place do-sys onto the control-flow stack. Append the run-time semantics given below to the current definition. The semantics are incomplete until resolved by a consumer of do-sys such as LOOP. Set up loop control parameters with index n2 | u2 and limit n1 | u1. An ambiguous condition exists if n1 | u1 and n2 | u2 are not both the same type. Anything already on the return stack becomes unavailable until the loop-control parameters are discarded.    : X ... limit first DO ... LOOP ; 

/DOES
DOES>
     ( C: colon-sys1 -- colon-sys2 )
Append the run-time semantics below to the current definition. Whether or not the current definition is rendered findable in the dictionary by the compilation of DOES> is implementation defined. Consume colon-sys1 and produce colon-sys2. Append the initiation semantics given below to the current definition. Replace the execution semantics of the most recent definition, referred to as name, with the name execution semantics given below. Return control to the calling definition specified by nest-sys1. An ambiguous condition exists if name was not defined with CREATE or a user-defined word that calls CREATE. Save implementation-dependent information nest-sys2 about the calling definition. Place name's data field address on the stack. The stack effects i * x represent arguments to name. Execute the portion of the definition that begins with the initiation semantics appended by the DOES> which modified name. The stack effects i * x and j * x represent arguments to and results from name, respectively. Following DOES>, a Standard Program may not make any assumptions regarding the ability to find either the name of the definition containing the DOES> or any previous definition whose name may be concealed by it. DOES> effectively ends one definition and begins another as far as local variables and control-flow structures are concerned. The compilation behavior makes it clear that the user is not entitled to place DOES> inside any control-flow structures. T{ : WEIRD: CREATE DOES> 1 + DOES> 2 + ; -> }T T{ WEIRD: W1 -> }T T{ ' W1 >BODY -> HERE }T T{ W1 -> HERE 1 + }T T{ W1 -> HERE 2 + }T 

/DROP
DROP
( x -- )
Remove x from the stack. 

/DUP
DUP
( x -- x x )
Duplicate x. 

/ELSE
ELSE
     ( C: orig1 -- orig2 )
Put the location of a new unresolved forward reference orig2 onto the control flow stack. Append the run-time semantics given below to the current definition. The semantics will be incomplete until orig2 is resolved (e.g., by THEN). Resolve the forward reference orig1 using the location following the appended run-time semantics. Continue execution at the location given by the resolution of orig2. 

/EMIT
EMIT
( x -- )
If x is a graphic character in the implementation-defined character set, display x. The effect of EMIT for all other values of x is implementation-defined. 

/ENVIRONMENTq
ENVIRONMENT?
( c-addr u -- false  |  i * x true )
c-addr is the address of a character string and u is the string's character count. u may have a value in the range from zero to an implementation-defined maximum which shall not be less than 31. The character string should contain a keyword from 3.2.6 Environmental queries or the optional word sets to be checked for correspondence with an attribute of the present environment. If the system treats the attribute as unknown, the returned flag is false; otherwise, the flag is true and the i * x returned is of the type specified in the table for the attribute queried. 

/EVALUATE
EVALUATE
( i * x c-addr u -- j * x )
Save the current input source specification. Store minus-one (-1) in SOURCE-ID if it is present. Make the string described by c-addr and u both the input source and input buffer, set >IN to zero, and interpret. When the parse area is empty, restore the prior input source specification. Other stack effects are due to the words EVALUATEd. 

/EXECUTE
EXECUTE
( i * x xt -- j * x )
Remove xt from the stack and perform the semantics identified by it. Other stack effects are due to the word EXECUTEd. 

/EXIT
EXIT
     ( -- )
Return control to the calling definition specified by nest-sys. Before executing EXIT within a do-loop, a program shall discard the loop-control parameters by executing UNLOOP. 

/FILL
FILL
( c-addr u char -- )
If u is greater than zero, store char in each of u consecutive characters of memory beginning at c-addr. T{ FBUF 1 20 FILL -> }T T{ SEEBUF -> 20 00 00 }T 

/FIND
FIND
( c-addr -- c-addr 0  |  xt 1  |  xt -1 )
Find the definition named in the counted string at c-addr. If the definition is not found, return c-addr and zero. If the definition is found, return its execution token xt. If the definition is immediate, also return one (1), otherwise also return minus-one (-1). For a given string, the values returned by FIND while compiling may differ from those returned while not compiling. 

/FMDivMOD
FM/MOD
( d1 n1 -- n2 n3 )
Divide d1 by n1, giving the floored quotient n3 and the remainder n2. Input and output stack arguments are signed. An ambiguous condition exists if n1 is zero or if the quotient lies outside the range of a single-cell signed integer. The committee considered providing two complete sets of explicitly named division operators, and declined to do so on the grounds that this would unduly enlarge and complicate the standard. Instead, implementors may define the normal division words in terms of either FM/MOD or SM/REM providing they document their choice. People wishing to have explicitly named sets of operators are encouraged to do so. FM/MOD may be used, for example, to define: 

/HERE
HERE
( -- addr )
addr is the data-space pointer. 

/HOLD
HOLD
( char -- )
Add char to the beginning of the pictured numeric output string. An ambiguous condition exists if HOLD executes outside of a <# #> delimited number conversion. 

/I
I
     ( -- n | u )
n | u is a copy of the current (innermost) loop index. An ambiguous condition exists if the loop control parameters are unavailable. 

/IF
IF
     ( C: -- orig )
Put the location of a new unresolved forward reference orig onto the control flow stack. Append the run-time semantics given below to the current definition. The semantics are incomplete until orig is resolved, e.g., by THEN or ELSE. If all bits of x are zero, continue execution at the location specified by the resolution of orig.    : X ... test IF ... THEN ... ; \ Multiple ELSEs in an IF statement : melse IF 1 ELSE 2 ELSE 3 ELSE 4 ELSE 5 THEN ; T{ <FALSE> melse -> 2 4 }T T{ <TRUE>  melse -> 1 3 5 }T 

/IMMEDIATE
IMMEDIATE
( -- )
Make the most recent definition an immediate word. An ambiguous condition exists if the most recent definition does not have a name or if it was defined as a SYNONYM. T{ VARIABLE iw3 IMMEDIATE 234 iw3 ! iw3 @ -> 234 }T T{ : iw4 iw3 [ @ ] LITERAL ; iw4 -> 234 }T 

/INVERT
INVERT
( x1 -- x2 )
Invert all bits of x1, giving its logical inverse x2. 

/J
J
     ( -- n | u )
n | u is a copy of the next-outer loop index. An ambiguous condition exists if the loop control parameters of the next-outer loop, loop-sys1, are unavailable.    : X ... DO ... DO ... J ... LOOP ... +LOOP ... ; T{ : GD4 DO 1 0 DO J LOOP -1 +LOOP ; -> }T T{        1          4 GD4 -> 4 3 2 1             }T T{       -1          2 GD4 -> 2 1 0 -1            }T T{ MID-UINT MID-UINT+1 GD4 -> MID-UINT+1 MID-UINT }T 

/KEY
KEY
( -- char )
Receive one character char, a member of the implementation-defined character set. Keyboard events that do not correspond to such characters are discarded until a valid character is received, and those events are subsequently unavailable. See A.10.6.2.1305 EKEY. 

/LEAVE
LEAVE
     ( -- )
Discard the current loop control parameters. An ambiguous condition exists if they are unavailable. Continue execution immediately following the innermost syntactically enclosing DO...LOOP or DO...+LOOP.    : X ... DO ... IF ... LEAVE THEN ... LOOP ... ; 

/LITERAL
LITERAL
     ( x -- )
Append the run-time semantics given below to the current definition. Place x on the stack. 

/LOOP
LOOP
     ( C: do-sys -- )
Append the run-time semantics given below to the current definition. Resolve the destination of all unresolved occurrences of LEAVE between the location given by do-sys and the next location for a transfer of control, to execute the words following the LOOP. An ambiguous condition exists if the loop control parameters are unavailable. Add one to the loop index. If the loop index is then equal to the loop limit, discard the loop parameters and continue execution immediately following the loop. Otherwise continue execution at the beginning of the loop.    : X ... limit first DO ... LOOP ... ; 

/LSHIFT
LSHIFT
( x1 u -- x2 )
Perform a logical left shift of u bit-places on x1, giving x2. Put zeroes into the least significant bits vacated by the shift. An ambiguous condition exists if u is greater than or equal to the number of bits in a cell. 

/MTimes
M*
( n1 n2 -- d )
d is the signed product of n1 times n2. 

/MAX
MAX
( n1 n2 -- n3 )
n3 is the greater of n1 and n2. 

/MIN
MIN
( n1 n2 -- n3 )
n3 is the lesser of n1 and n2. 

/MOD
MOD
( n1 n2 -- n3 )
Divide n1 by n2, giving the single-cell remainder n3. An ambiguous condition exists if n2 is zero. If n1 and n2 differ in sign, the implementation-defined result returned will be the same as that returned by either the phrase >R S>D R> FM/MOD DROP or the phrase >R S>D R> SM/REM DROP. 

/MOVE
MOVE
( addr1 addr2 u -- )
If u is greater than zero, copy the contents of u consecutive address units at addr1 to the u consecutive address units at addr2. After MOVE completes, the u consecutive address units at addr2 contain exactly what the u consecutive address units at addr1 contained before the move. T{ SBUF FBUF 0 CHARS MOVE -> }T T{ SEEBUF -> 20 20 20 }T 

/NEGATE
NEGATE
( n1 -- n2 )
Negate n1, giving its arithmetic inverse n2. 

/OR
OR
( x1 x2 -- x3 )
x3 is the bit-by-bit inclusive-or of x1 with x2. 

/OVER
OVER
( x1 x2 -- x1 x2 x1 )
Place a copy of x1 on top of the stack. 

/POSTPONE
POSTPONE
     ( "<spaces>name" -- )
Skip leading space delimiters. Parse name delimited by a space. Find name. Append the compilation semantics of name to the current definition. An ambiguous condition exists if name is not found.    : ENDIF POSTPONE THEN ; IMMEDIATE T{ : GT6 345 ; IMMEDIATE -> }T T{ : GT7 POSTPONE GT6 ; -> }T T{ GT7 -> 345 }T 

/QUIT
QUIT
( -- )
Empty the return stack, store zero in SOURCE-ID if it is present, make the user input device the input source, and enter interpretation state. Do not display a message. Repeat the following: 

/Rfrom
R>
     ( -- x )
Move x from the return stack to the data stack. 

/RFetch
R@
     ( -- x )
Copy x from the return stack to the data stack. 

/RECURSE
RECURSE
     ( -- )
Append the execution semantics of the current definition to the current definition. An ambiguous condition exists if RECURSE appears in a definition after DOES>. This is Forth's recursion operator; in some implementations it is called MYSELF. The usual example is the coding of the factorial function. DECIMAL T{ :NONAME ( n -- 0, 1, .., n )       DUP IF DUP >R 1- RECURSE R> THEN     ;     CONSTANT rn1 -> }T T{ 0 rn1 EXECUTE -> 0 }T T{ 4 rn1 EXECUTE -> 0 1 2 3 4 }T 

/REPEAT
REPEAT
     ( C: orig dest -- )
Append the run-time semantics given below to the current definition, resolving the backward reference dest. Resolve the forward reference orig using the location following the appended run-time semantics. Continue execution at the location given by dest. 

/ROT
ROT
( x1 x2 x3 -- x2 x3 x1 )
Rotate the top three stack entries. 

/RSHIFT
RSHIFT
( x1 u -- x2 )
Perform a logical right shift of u bit-places on x1, giving x2. Put zeroes into the most significant bits vacated by the shift. An ambiguous condition exists if u is greater than or equal to the number of bits in a cell. 

/Sq
S"
     ( "ccc<quote>" -- )
Parse ccc delimited by " (double-quote). Append the run-time semantics given below to the current definition. Return c-addr and u describing a string consisting of the characters ccc. A program shall not alter the returned string. : GC5 S" A String"2DROP ; \ There is no space between the " and 2DROP T{ GC5 -> }T 

/StoD
S>D
( n -- d )
Convert the number n to the double-cell number d with the same numerical value. 

/SIGN
SIGN
( n -- )
If n is negative, add a minus sign to the beginning of the pictured numeric output string. An ambiguous condition exists if SIGN executes outside of a <# #> delimited number conversion. 

/SMDivREM
SM/REM
( d1 n1 -- n2 n3 )
Divide d1 by n1, giving the symmetric quotient n3 and the remainder n2. Input and output stack arguments are signed. An ambiguous condition exists if n1 is zero or if the quotient lies outside the range of a single-cell signed integer. 

/SOURCE
SOURCE
( -- c-addr u )
c-addr is the address of, and u is the number of characters in, the input buffer. 

/SPACE
SPACE
( -- )
Display one space. 

/SPACES
SPACES
( n -- )
If n is greater than zero, display n spaces. 

/STATE
STATE
( -- a-addr )
a-addr is the address of a cell containing the compilation-state flag. STATE is true when in compilation state, false otherwise. The true value in STATE is non-zero, but is otherwise implementation-defined. Only the following standard words alter the value in STATE: : (colon), ; (semicolon), ABORT, QUIT, :NONAME, [ (left-bracket), ] (right-bracket). STATE does not nest with text interpreter nesting. For example, the code sequence: 

/SWAP
SWAP
( x1 x2 -- x2 x1 )
Exchange the top two stack items. 

/THEN
THEN
     ( C: orig -- )
Append the run-time semantics given below to the current definition. Resolve the forward reference orig using the location of the appended run-time semantics. Continue execution.    : X ... test IF ... THEN ... ; 

/TYPE
TYPE
( c-addr u -- )
If u is greater than zero, display the character string specified by c-addr and u. 

/Ud
U.
( u -- )
Display u in free field format. 

/Uless
U<
( u1 u2 -- flag )
flag is true if and only if u1 is less than u2. 

/UMTimes
UM*
( u1 u2 -- ud )
Multiply u1 by u2, giving the unsigned double-cell product ud. All values and arithmetic are unsigned. T{ MID-UINT+1 1 RSHIFT 2 UM* ->  MID-UINT+1 0 }T T{ MID-UINT+1          2 UM* ->           0 1 }T T{ MID-UINT+1          4 UM* ->           0 2 }T T{         1S          2 UM* -> 1S 1 LSHIFT 1 }T T{   MAX-UINT   MAX-UINT UM* ->    1 1 INVERT }T 

/UMDivMOD
UM/MOD
( ud u1 -- u2 u3 )
Divide ud by u1, giving the quotient u3 and the remainder u2. All values and arithmetic are unsigned. An ambiguous condition exists if u1 is zero or if the quotient lies outside the range of a single-cell unsigned integer. 

/UNLOOP
UNLOOP
     ( -- )
Discard the loop-control parameters for the current nesting level. An UNLOOP is required for each nesting level before the definition may be EXITed. An ambiguous condition exists if the loop-control parameters are unavailable. UNLOOP allows the use of EXIT within the context of DO ... LOOP and related do-loop constructs. UNLOOP as a function has been called UNDO. UNLOOP is more indicative of the action: nothing gets undone — we simply stop doing it. 

/UNTIL
UNTIL
     ( C: dest -- )
Append the run-time semantics given below to the current definition, resolving the backward reference dest. If all bits of x are zero, continue execution at the location specified by dest. 

/VARIABLE
VARIABLE
( "<spaces>name" -- )
Skip leading space delimiters. Parse name delimited by a space. Create a definition for name with the execution semantics defined below. Reserve one cell of data space at an aligned address. a-addr is the address of the reserved cell. A program is responsible for initializing the contents of the reserved cell. 

/WHILE
WHILE
     ( C: dest -- orig dest )
Put the location of a new unresolved forward reference orig onto the control flow stack, under the existing dest. Append the run-time semantics given below to the current definition. The semantics are incomplete until orig and dest are resolved (e.g., by REPEAT). If all bits of x are zero, continue execution at the location specified by the resolution of orig. T{ : GI5 BEGIN DUP 2 > WHILE        DUP 5 < WHILE DUP 1+ REPEAT        123 ELSE 345 THEN ; -> }T T{ 1 GI5 -> 1 345 }T T{ 2 GI5 -> 2 345 }T T{ 3 GI5 -> 3 4 5 123 }T T{ 4 GI5 -> 4 5 123 }T T{ 5 GI5 -> 5 123 }T 

/WORD
WORD
( char "<chars>ccc<char>" -- c-addr )
Skip leading delimiters. Parse characters ccc delimited by char. An ambiguous condition exists if the length of the parsed string is greater than the implementation-defined length of a counted string. 

/XOR
XOR
( x1 x2 -- x3 )
x3 is the bit-by-bit exclusive-or of x1 with x2. 

/Bracket
[
     ( -- )
Enter interpretation state. [ is an immediate word. 

/BracketTick
[']
     ( "<spaces>name" -- )
Skip leading space delimiters. Parse name delimited by a space. Find name. Append the run-time semantics given below to the current definition. Place name's execution token xt on the stack. The execution token returned by the compiled phrase "['] X" is the same value returned by "' X" outside of compilation state. See: A.6.1.1550 FIND. 

/BracketCHAR
[CHAR]
     ( "<spaces>name" -- )
Skip leading space delimiters. Parse name delimited by a space. Append the run-time semantics given below to the current definition. Place char, the value of the first character of name, on the stack. 

right-bracket




/Dotp
.(
     ( "ccc<paren>" -- )
Parse and display ccc delimited by ) (right parenthesis). .( is an immediate word. 

/DotR
.R
( n1 n2 -- )
Display n1 right aligned in a field n2 characters wide. If the number of characters required to display n1 is greater than n2, all digits are displayed with no leading spaces in a field as wide as necessary. 

/Zerone
0<>
( x -- flag )
flag is true if and only if x is not equal to zero. 

/Zeromore
0>
( n -- flag )
flag is true if and only if n is greater than zero. 

/TwotoR
2>R
     ( x1 x2 -- )
Transfer cell pair x1 x2 to the return stack. Semantically equivalent to SWAP >R >R. 

/TwoRfrom
2R>
     ( -- x1 x2 )
Transfer cell pair x1 x2 from the return stack. Semantically equivalent to R> R> SWAP. 

/TwoRFetch
2R@
     ( -- x1 x2 )
Copy cell pair x1 x2 from the return stack. Semantically equivalent to R> R> 2DUP >R >R SWAP. 

/ColonNONAME
:NONAME
( C: -- colon-sys )
Create an execution token xt, enter compilation state and start the current definition, producing colon-sys. Append the initiation semantics given below to the current definition. Save implementation-dependent information nest-sys about the calling definition. The stack effects i * x represent arguments to xt. Execute the definition specified by xt. The stack effects i * x and j * x represent arguments to and results from xt, respectively.    DEFER print    :NONAME ( n -- ) . ; IS print 

/ne
<>
( x1 x2 -- flag )
flag is true if and only if x1 is not bit-for-bit the same as x2. 

/qDO
?DO
     ( C: -- do-sys )
Put do-sys onto the control-flow stack. Append the run-time semantics given below to the current definition. The semantics are incomplete until resolved by a consumer of do-sys such as LOOP. If n1 | u1 is equal to n2 | u2, continue execution at the location given by the consumer of do-sys. Otherwise set up loop control parameters with index n2 | u2 and limit n1 | u1 and continue executing immediately following ?DO. Anything already on the return stack becomes unavailable until the loop control parameters are discarded. An ambiguous condition exists if n1 | u1 and n2 | u2 are not both of the same type.    : X ... ?DO ... LOOP ... ; 

/ACTION-OF
ACTION-OF
     ( "<spaces>name" -- xt )
Skip leading spaces and parse name delimited by a space. xt is the execution token that name is set to execute. An ambiguous condition exists if name was not defined by DEFER, or if the name has not been set to execute an xt. Skip leading spaces and parse name delimited by a space. Append the run-time semantics given below to the current definition. An ambiguous condition exists if name was not defined by DEFER. xt is the execution token that name is set to execute. An ambiguous condition exists if name has not been set to execute an xt. T{ ' * ' defer1 DEFER! ->   }T T{          2 3 defer1 -> 6 }T T{ ACTION-OF defer1 -> ' * }T T{    action-defer1 -> ' * }T 

/AGAIN
AGAIN
     ( C: dest -- )
Append the run-time semantics given below to the current definition, resolving the backward reference dest. Continue execution at the location specified by dest. If no other control flow words are used, any program code after AGAIN will not be executed. Unless word-sequence has a way to terminate, this is an endless loop. 

/BUFFERColon
BUFFER:
( u "<spaces>name" -- )
Skip leading space delimiters. Parse name delimited by a space. Create a definition for name, with the execution semantics defined below. Reserve u address units at an aligned address. Contiguity of this region with any other region is undefined. a-addr is the address of the space reserved by BUFFER: when it defined name. The program is responsible for initializing the contents. 

/Cq
C"
     ( "ccc<quote>" -- )
Parse ccc delimited by " (double-quote) and append the run-time semantics given below to the current definition. Return c-addr, a counted string consisting of the characters ccc. A program shall not alter the returned string. See: A.3.1.3.4 Counted strings. 

/CASE
CASE
     ( C: -- case-sys )
Mark the start of the CASE...OF...ENDOF...ENDCASE structure. Append the run-time semantics given below to the current definition. Continue execution. 

/COMPILEComma
COMPILE,
     ( xt -- )
Append the execution semantics of the definition represented by xt to the execution semantics of the current definition. In traditional threaded-code implementations, compilation is performed by , (comma). This usage is not portable; it doesn't work for subroutine-threaded, native code, or relocatable implementations. Use of COMPILE, is portable. 

/DEFER
DEFER
( "<spaces>name" -- )
Skip leading space delimiters. Parse name delimited by a space. Create a definition for name with the execution semantics defined below. Execute the xt that name is set to execute. An ambiguous condition exists if name has not been set to execute an xt. T{ ' + IS defer2 ->   }T T{    1 2 defer2 -> 3 }T 

/DEFERStore
DEFER!
( xt2 xt1 -- )
Set the word xt1 to execute xt2. An ambiguous condition exists if xt1 is not for a word defined by DEFER. T{ ' * ' defer3 DEFER! -> }T T{ 2 3 defer3 -> 6 }T 

/DEFERFetch
DEFER@
( xt1 -- xt2 )
xt2 is the execution token xt1 is set to execute. An ambiguous condition exists if xt1 is not the execution token of a word defined by DEFER, or if xt1 has not been set to execute an xt. T{ ' * ' defer4 DEFER! -> }T T{ 2 3 defer4 -> 6 }T T{ ' defer4 DEFER@ -> ' * }T 

/ENDCASE
ENDCASE
     ( C: case-sys -- )
Mark the end of the CASE...OF...ENDOF...ENDCASE structure. Use case-sys to resolve the entire structure. Append the run-time semantics given below to the current definition. Discard the case selector x and continue execution. 

/ENDOF
ENDOF
     ( C: case-sys1 of-sys -- case-sys2 )
Mark the end of the OF...ENDOF part of the CASE structure. The next location for a transfer of control resolves the reference given by of-sys. Append the run-time semantics given below to the current definition. Replace case-sys1 with case-sys2 on the control-flow stack, to be resolved by ENDCASE. Continue execution at the location specified by the consumer of case-sys2. 

/ERASE
ERASE
( addr u -- )
If u is greater than zero, clear all bits in each of u consecutive address units of memory beginning at addr. 

/FALSE
FALSE
( -- false )
Return a false flag. 

/HEX
HEX
( -- )
Set contents of BASE to sixteen. 

/HOLDS
HOLDS
( c-addr u -- )
Adds the string represented by c-addr u to the pictured numeric output string. An ambiguous condition exists if HOLDS executes outside of a <# #> delimited number conversion. 

/IS
IS
     ( xt "<spaces>name" -- )
Skip leading spaces and parse name delimited by a space. Set name to execute xt. Skip leading spaces and parse name delimited by a space. Append the run-time semantics given below to the current definition. An ambiguous condition exists if name was not defined by DEFER. Set name to execute xt. T{ ' * IS defer5 -> }T T{ 2 3 defer5 -> 6 }T 

/MARKER
MARKER
( "<spaces>name" -- )
Skip leading space delimiters. Parse name delimited by a space. Create a definition for name with the execution semantics defined below. Restore all dictionary allocation and search order pointers to the state they had just prior to the definition of name. Remove the definition of name and all subsequent definitions. Restoration of any structures still existing that could refer to deleted definitions or deallocated data space is not necessarily provided. No other contextual information such as numeric base is affected. 

/NIP
NIP
( x1 x2 -- x2 )
Drop the first item below the top of stack. 

/OF
OF
     ( C: -- of-sys )
Put of-sys onto the control flow stack. Append the run-time semantics given below to the current definition. The semantics are incomplete until resolved by a consumer of of-sys such as ENDOF. If the two values on the stack are not equal, discard the top value and continue execution at the location specified by the consumer of of-sys, e.g., following the next ENDOF. Otherwise, discard both values and continue execution in line. 

/PAD
PAD
( -- c-addr )
c-addr is the address of a transient region that can be used to hold data for intermediate processing. 

/PARSE
PARSE
( char "ccc<char>" -- c-addr u )
Parse ccc delimited by the delimiter char. The traditional Forth word for parsing is WORD. PARSE solves the following problems with WORD: 

/PARSE-NAME
PARSE-NAME
( "<spaces>name<space>" -- c-addr u )
Skip leading space delimiters. Parse name delimited by a space. : isnotspace? ( c -- f )    isspace? 0= ; \ test empty parse area T{ PARSE-NAME     NIP -> 0 }T    \ empty line T{ PARSE-NAME        NIP -> 0 }T    \ line with white space 

/PICK
PICK
( xu...x1 x0 u -- xu...x1 x0 xu )
Remove u. Copy the xu to the top of the stack. An ambiguous condition exists if there are less than u+2 items on the stack before PICK is executed. 

/REFILL
REFILL
( -- flag )
Attempt to fill the input buffer from the input source, returning a true flag if successful. 

/RESTORE-INPUT
RESTORE-INPUT
( xn ... x1 n -- flag )
Attempt to restore the input source specification to the state described by x1 through xn. flag is true if the input source specification cannot be so restored. 

/ROLL
ROLL
( xu xu-1 ... x0 u -- xu-1 ... x0 xu )
Remove u. Rotate u+1 items on the top of the stack. An ambiguous condition exists if there are less than u+2 items on the stack before ROLL is executed. 

/Seq
S\"
( "ccc<quote>" -- ) 


/SAVE-INPUT
SAVE-INPUT
( -- xn ... x1 n )
x1 through xn describe the current state of the input source specification for later use by RESTORE-INPUT. SAVE-INPUT and RESTORE-INPUT are intended for repositioning within a single input source; for example, the following scenario is NOT allowed for a Standard Program: 

/SOURCE-ID
SOURCE-ID
( -- 0  |  -1  )
Identifies the input source as follows: 

/TO
TO
     ( i * x "<spaces>name" -- )
Skip leading spaces and parse name delimited by a space. Perform the "TO name run-time" semantics given in the definition for the defining word of name. An ambiguous condition exists if name was not defined by a word with "TO name run-time" semantics. Skip leading spaces and parse name delimited by a space. Append the "TO name run-time" semantics given in the definition for the defining word	of name to the current definition. An ambiguous condition exists if name was not defined by a word with "TO name run-time" semantics. Some implementations of TO do not parse; instead they set a mode flag that is tested by the subsequent execution of name. Standard programs must use TO as if it parses. Therefore TO and name must be contiguous and on the same line in the source text. 

/TRUE
TRUE
( -- true )
Return a true flag, a single-cell value with all bits set. 

/TUCK
TUCK
( x1 x2 -- x2 x1 x2 )
Copy the first (top) stack item below the second stack item. 

/UDotR
U.R
( u n -- )
Display u right aligned in a field n characters wide. If the number of characters required to display u is greater than n, all digits are displayed with no leading spaces in a field as wide as necessary. 

/Umore
U>
( u1 u2 -- flag )
flag is true if and only if u1 is greater than u2. 

/UNUSED
UNUSED
( -- u )
u is the amount of space remaining in the region addressed by HERE, in address units. 

/VALUE
VALUE
( x "<spaces>name" -- )
Skip leading space delimiters. Parse name delimited by a space. Create a definition for name with the execution semantics defined below, with an initial value equal to x. Place x on the stack. The value of x is that given when name was created, until the phrase x TO name is executed, causing a new value of x to be assigned to name. Assign the value x to name. T{ : vd1 v1 ; -> }T T{ vd1 -> 222 }T 

/WITHIN
WITHIN
( n1 | u1 n2 | u2 n3 | u3 -- flag )
Perform a comparison of a test value n1 | u1 with a lower limit n2 | u2 and an upper limit n3 | u3, returning true if either (n2 | u2 < n3 | u3 and (n2 | u2 <= n1 | u1 and n1 | u1 < n3 | u3)) or (n2 | u2 > n3 | u3 and (n2 | u2 <= n1 | u1 or n1 | u1 < n3 | u3)) is true, returning false otherwise. An ambiguous condition exists n1 | u1, n2 | u2, and n3 | u3 are not all the same type.    33000 32000 34000 WITHIN 

/BracketCOMPILE
[COMPILE]
     ( "<spaces>name" -- )
Skip leading space delimiters. Parse name delimited by a space. Find name. If name has other than default compilation semantics, append them to the current definition; otherwise append the execution semantics of name. An ambiguous condition exists if name is not found. With an immediate word T{ : [c2] [COMPILE] [c1] ; -> }T T{ 234 [c2] -> 234 234 }T 

/bs
\
     ( "ccc<eol>" -- )
Parse and discard the remainder of the parse area. \ is an immediate word. 

